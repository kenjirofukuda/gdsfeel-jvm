/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gdsfeel.ide;

import com.gdsfeel.Library;
import java.awt.BorderLayout;
import java.awt.Image;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.gdsfeel.ide//Navigation//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "NavigationTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.gdsfeel.ide.NavigationTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NavigationAction",
        preferredID = "NavigationTopComponent")
@Messages({
  "CTL_NavigationAction=Navigation",
  "CTL_NavigationTopComponent=Navigation Window",
  "HINT_NavigationTopComponent=This is a Navigation window"
})
public final class NavigationTopComponent extends TopComponent implements
        ExplorerManager.Provider {
//private InstanceContent content;

  private final ExplorerManager mgr = new ExplorerManager();
  private Map<File, Library> libMap = new HashMap<File, Library>();

  public NavigationTopComponent() {
    initComponents();
    setName(Bundle.CTL_NavigationTopComponent());
    setToolTipText(Bundle.HINT_NavigationTopComponent());

    associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
    setLayout(new BorderLayout());
    BeanTreeView btv = new BeanTreeView();
    btv.setRootVisible(false);
    add(btv, BorderLayout.CENTER);
    mgr.setRootContext(new AbstractNode(Children.create(
            new LibraryChildFactory(), true)));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override //ExplorerManager.Provider
  public ExplorerManager getExplorerManager() {
    return mgr;
  }
}

class LibraryNode extends AbstractNode {

  LibraryNode(Library obj) {
    super(Children.create(
            new StructureChildFactory(obj),
            true), Lookups.singleton(
            obj));
    setDisplayName(obj.getName());
  }

  @Override
  public Image getIcon(int type) {
    return ImageUtilities.loadImage("com/gdsfeel/ide/1371274017_database.png");
  }

  @Override
  public Image getOpenedIcon(int type) {
    return getIcon(type);
  }
}
